using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

public class movement : MonoBehaviour
{
    //General
    public float speed;
    private Vector2 input;
    public Rigidbody rb;

    //Camera
    public GameObject cam;
    public Vector2 mouseSens;
    private Vector3 rotation;
    private Vector3 mouse;

    private void Start()
    {
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }

    void Update()
    {
        rotation.y += mouse.x * mouseSens.x; //moving mouse left and right rotates player on the y axis
        rotation.x -= mouse.y * mouseSens.y; //moving mouse forwards and backwards rotates camera on the x axis
        rotation.x = Mathf.Clamp(rotation.x, -90f, 90f); //Limiting up and down look range

        transform.eulerAngles = new Vector3(0f, rotation.y, 0f); //create new vec for player rotations
        cam.transform.localEulerAngles = new Vector3(rotation.x, 0f, 0f); //create new vec for camera rotations

        Vector3 forwardMove = input.y * cam.transform.forward; //create new vec for forwards movement respect to the camera
        Vector3 rightMove = input.x * cam.transform.right; //create new vec for sideways movement respect to the camera
        Vector3 moveDir = forwardMove + rightMove; //add these vectors together (not necessary but looks nicer)
        moveDir.y = 0f; //zero out y value so gravity and jumping works

        rb.velocity = new Vector3(moveDir.x * speed, rb.velocity.y, moveDir.z * speed); //setting the velocity equal to the new movement vector allowing movement according to where camera is looking
    }

    public void Move(InputAction.CallbackContext context)
    {
        input = context.ReadValue<Vector2>();
    }

    public void Look(InputAction.CallbackContext context)
    {
        mouse = context.ReadValue<Vector2>();
    }
}
